project('ezquake', 'c',
	default_options : [
		'default_library=static',
	],
)

ver = find_program(join_paths(meson.source_root(), 'version.sh'))

version = run_command(ver, '--version')
revision = run_command(ver, '--revision')

sources = [
	'central.c',
#	'cd_linux.c',
	'cd_null.c',
#	'cd_win.c', TODO:remove
	'cl_cam.c',
	'cl_cmd.c',
	'cl_demo.c',
	'cl_ents.c',
	'cl_input.c',
	'cl_main.c',
	'cl_multiview.c',
	'cl_nqdemo.c',
	'cl_parse.c',
	'cl_pred.c',
	'cl_screen.c',
	'cl_screenshot.c',
	'cl_skygroups.c',
	'cl_slist.c',
	'cl_tent.c',
	'cl_view.c',
	'cmd.c',
	'cmodel.c',
	'collision.c',
	'common.c',
	'common_draw.c',
	'com_msg.c',
	'config_manager.c',
	'console.c',
	'crc.c',
	'Ctrl.c',
	'Ctrl_EditBox.c',
	'Ctrl_PageViewer.c',
	'Ctrl_ScrollBar.c',
	'Ctrl_Tab.c',
	'cvar.c',
	'demo_controls.c',
	'document_rendering.c',
	'EX_browser.c',
	'EX_browser_net.c',
	'EX_browser_pathfind.c',
	'EX_browser_ping.c',
	'EX_browser_qtvlist.c',
	'EX_browser_sources.c',
	'EX_FileList.c',
	'EX_qtvlist.c',
	'ez_button.c',
	'ez_controls.c',
	'ez_label.c',
	'ez_listview.c',
	'ez_listviewitem.c',
	'ezquake-icon.c',
	'ez_scrollbar.c',
	'ez_scrollpane.c',
	'ez_slider.c',
	'ez_window.c',
	'fchecks.c',
	'fmod.c',
	'fonts.c',
	'fragstats.c',
	'fs.c',
	'gl_aliasmodel.c',
	'gl_aliasmodel_md3.c',
	'gl_buffers.c',
	'glc_aliasmodel.c',
	'glc_aliasmodel_mesh.c',
	'glc_bloom.c',
	'glc_brushmodel.c',
	'glc_draw.c',
	'glc_fog.c',
	'glc_framebuffer.c',
	'glc_lightmaps.c',
	'glc_main.c',
	'glc_matrix.c',
	'glc_md3.c',
	'glc_misc.c',
	'glc_particles.c',
	'glc_performance.c',
	'glc_sdl.c',
	'glc_sky.c',
	'glc_sprite3d.c',
	'glc_state.c',
	'glc_surf.c',
	'glc_turb_surface.c',
	'glc_vao.c',
	'glc_warp.c',
	'gl_debug.c',
	'gl_drawcall_wrappers.c',
	'gl_framebuffer.c',
	'glm_aliasmodel.c',
	'glm_brushmodel.c',
	'glm_draw.c',
	'glm_framebuffer.c',
	'gl_misc.c',
	'glm_lightmaps.c',
	'glm_main.c',
	'glm_md3.c',
	'glm_misc.c',
	'glm_particles.c',
	'glm_performance.c',
	'glm_rmain.c',
	'glm_rsurf.c',
	'glm_sdl.c',
	'glm_sprite3d.c',
	'glm_sprite.c',
	'glm_state.c',
	'glm_texture_arrays.c',
	'glm_vao.c',
	'gl_program.c',
	'gl_sdl.c',
	'gl_sprite3d.c',
	'gl_state.c',
	'gl_texture.c',
	'gl_texture_functions.c',
	'hash.c',
	'help.c',
	'help_files.c',
	'host.c',
	'hud_262.c',
	'hud_ammo.c',
	'hud_armor.c',
	'hud_autoid.c',
	'hud.c',
	'hud_centerprint.c',
	'hud_clock.c',
	'hud_common.c',
	'hud_editor.c',
	'hud_face.c',
	'hud_frags.c',
	'hud_gamesummary.c',
	'hud_groups.c',
	'hud_guns.c',
	'hud_health.c',
	'hud_items.c',
	'hud_net.c',
	'hud_performance.c',
	'hud_qtv.c',
	'hud_radar.c',
	'hud_scores.c',
	'hud_speed.c',
	'hud_teaminfo.c',
	'hud_tracking.c',
	'hud_weapon_stats.c',
	'ignore.c',
	'image.c',
#	'in_osx.c',
	'in_sdl2.c',
	'irc.c',
	'irc_filter.c',
	'keys.c',
	'linux_signals.c',
#	'localtime.c',
	'localtime_posix.c',
#	'localtime_win.c',
	'logging.c',
	'match_tools.c',
	'match_tools_challenge.c',
	'mathlib.c',
	'md4.c',
	'menu.c',
	'menu_demo.c',
	'menu_ingame.c',
	'menu_multiplayer.c',
	'menu_options.c',
	'menu_proxy.c',
#	'movie_avi.c',
	'movie.c',
	'mvd_autotrack.c',
	'mvd_utils.c',
	'mvd_xmlstats.c',
	'net.c',
	'net_chan.c',
	'parser.c',
	'pmove.c',
	'pmovetst.c',
	'pr2_cmds.c',
	'pr2_edict.c',
	'pr2_exec.c',
	'pr2_vm.c',
	'pr_cmds.c',
	'pr_edict.c',
	'pr_exec.c',
	'q_shared.c',
	'qtv.c',
	'r_aliasmodel.c',
	'r_aliasmodel_md3.c',
	'r_aliasmodel_mesh.c',
	'r_aliasmodel_skins.c',
	'r_atlas.c',
	'r_bloom.c',
	'r_brushmodel_bspx.c',
	'r_brushmodel.c',
	'r_brushmodel_load.c',
	'r_brushmodel_sky.c',
	'r_brushmodel_surfaces.c',
	'r_brushmodel_textures.c',
	'r_brushmodel_warpsurfaces.c',
	'r_buffers.c',
	'r_chaticons.c',
	'r_draw.c',
	'r_draw_charset.c',
	'r_draw_circle.c',
	'r_draw_image.c',
	'r_draw_line.c',
	'r_draw_polygon.c',
	'r_hud.c',
	'r_lightmaps.c',
	'r_main.c',
	'r_matrix.c',
	'r_misc.c',
	'r_model.c',
	'r_netgraph.c',
	'r_palette.c',
	'r_part.c',
	'r_particles_qmb.c',
	'r_particles_qmb_spawn.c',
	'r_particles_qmb_trails.c',
	'r_part_trails.c',
	'r_performance.c',
	'r_refrag.c',
	'r_rlight.c',
	'r_rmain.c',
	'r_rmisc.c',
	'r_sprite3d.c',
	'r_sprites.c',
	'r_states.c',
	'r_texture.c',
	'r_texture_cvars.c',
	'r_texture_load.c',
	'r_texture_util.c',
	'rulesets.c',
	'sbar.c',
	'settings_page.c',
	'sha1.c',
	'skin.c',
	'snd_main.c',
	'snd_mem.c',
	'snd_mix.c',
	'snd_voip.c',
	'stats_grid.c',
	'sv_ccmds.c',
	'sv_demo.c',
	'sv_demo_misc.c',
	'sv_demo_qtv.c',
	'sv_ents.c',
	'sv_init.c',
	'sv_login.c',
	'sv_main.c',
	'sv_master.c',
	'sv_mod_frags.c',
	'sv_move.c',
	'sv_nchan.c',
#	'sv_null.c',
	'sv_phys.c',
	'sv_save.c',
	'sv_send.c',
#	'sv_sys_unix.c', TODO:remove
#	'sv_sys_win.c', TODO:remove
	'sv_user.c',
	'sv_world.c',
	'sys_posix.c',
	'sys_sdl2.c',
#	'sys_win.c',
	'teamplay.c',
	'teamplay_locfiles.c',
	'textencoding.c',
	'tp_msgs.c',
	'tp_triggers.c',
	'utils.c',
	'version.c',
	'vfs_doomwad.c',
	'vfs_gzip.c',
	'vfs_mmap.c',
	'vfs_os.c',
	'vfs_pak.c',
	'vfs_tar.c',
	'vfs_tcp.c',
	'vfs_zip.c',
	'vid_common_gl.c',
	'vid_sdl2.c',
	'vid_vsync.c',
	'vk_blending.c',
	'vk_buffers.c',
	'vk_debug.c',
	'vk_draw.c',
	'vk_graphics_pipeline.c',
	'vk_instance.c',
	'vk_lightmaps.c',
	'vk_main.c',
	'vk_md3.c',
	'vk_misc.c',
	'vk_physical_devices.c',
	'vk_renderpass.c',
	'vk_sdl.c',
	'vk_swapchain.c',
	'vk_vao.c',
	'vk_window_surface.c',
	'vx_camera.c',
	'vx_coronas.c',
#	'vx_motiontrail.c',
	'vx_stuff.c',
	'vx_tracker.c',
	'vx_vertexlights.c',
	'wad.c',
	'xsd.c',
	'xsd_document.c',
	'zone.c'
]

awk = find_program('awk')
od = find_program('od')
gen = generator(find_program(join_paths(meson.source_root(), 'json2c.sh')),
	output : '@BASENAME@.c',
	arguments : ['@INPUT@', '@OUTPUT@']
)
sources += gen.process(
	'help_cmdline_params.json',
	'help_commands.json',
	'help_macros.json',
	'help_variables.json',

	'glsl/common.glsl',
	'glsl/constants.glsl',
	'glsl/draw_aliasmodel.fragment.glsl',
	'glsl/draw_aliasmodel.vertex.glsl',
	'glsl/draw_sprites.fragment.glsl',
	'glsl/draw_sprites.vertex.glsl',
	'glsl/draw_world.fragment.glsl',
	'glsl/draw_world.vertex.glsl',
	'glsl/fx_world_geometry.fragment.glsl',
	'glsl/fx_world_geometry.vertex.glsl',
	'glsl/hud_draw_circle.fragment.glsl',
	'glsl/hud_draw_circle.vertex.glsl',
	'glsl/hud_draw_image.fragment.glsl',
	'glsl/hud_draw_image.geometry.glsl',
	'glsl/hud_draw_image.vertex.glsl',
	'glsl/hud_draw_line.fragment.glsl',
	'glsl/hud_draw_line.vertex.glsl',
	'glsl/hud_draw_polygon.fragment.glsl',
	'glsl/hud_draw_polygon.vertex.glsl',
	'glsl/lighting.compute.glsl',
	'glsl/lighting_copy.compute.glsl',
	'glsl/post_process_screen.fragment.glsl',
	'glsl/post_process_screen.vertex.glsl',

	'glsl/glc/glc_aliasmodel_shadow.fragment.glsl',
	'glsl/glc/glc_aliasmodel_shadow.vertex.glsl',
	'glsl/glc/glc_aliasmodel_shell.fragment.glsl',
	'glsl/glc/glc_aliasmodel_shell.vertex.glsl',
	'glsl/glc/glc_aliasmodel_std.fragment.glsl',
	'glsl/glc/glc_aliasmodel_std.vertex.glsl',
	'glsl/glc/glc_caustics.fragment.glsl',
	'glsl/glc/glc_caustics.vertex.glsl',
	'glsl/glc/glc_draw_sprites.fragment.glsl',
	'glsl/glc/glc_draw_sprites.vertex.glsl',
	'glsl/glc/glc_hud_images.fragment.glsl',
	'glsl/glc/glc_hud_images.vertex.glsl',
	'glsl/glc/glc_post_process_screen.fragment.glsl',
	'glsl/glc/glc_post_process_screen.vertex.glsl',
	'glsl/glc/glc_sky.fragment.glsl',
	'glsl/glc/glc_sky.vertex.glsl',
	'glsl/glc/glc_turbsurface.fragment.glsl',
	'glsl/glc/glc_turbsurface.vertex.glsl',
	'glsl/glc/glc_world_drawflat.fragment.glsl',
	'glsl/glc/glc_world_drawflat.vertex.glsl',
	'glsl/glc/glc_world_secondpass.fragment.glsl',
	'glsl/glc/glc_world_secondpass.vertex.glsl',
	'glsl/glc/glc_world_textured.fragment.glsl',
	'glsl/glc/glc_world_textured.vertex.glsl',
)

cmake = import('cmake')

opt_var = cmake.subproject_options()
opt_var.add_cmake_defines({'BUILD_PROGRAMS': false})

minizip_lib = static_library('minizip',
	'minizip/ioapi.c',
	'minizip/unzip.c',
	include_directories : include_directories('minizip'),
)
minizip_dep = declare_dependency(
	link_with : minizip_lib,
	include_directories : include_directories('minizip'),
)

executable('ezquake', sources,
	c_args : [
		'-DRENDERER_OPTION_CLASSIC_OPENGL',
	#	'-DRENDERER_OPTION_MODERN_OPENGL',
		'-DREVISION=' + revision.stdout().strip(),
		'-DVERSION="' + version.stdout().strip() + '"',
		'-DNDEBUG', '-DJSS_CAM', '-DUSE_PR2', '-DWITH_NQPROGS',
		'-DWITH_ZIP',
		'-DWITH_PNG', '-D__Q_PNG14__', '-DWITH_ZLIB',
		'-DWITH_JPEG',
	],
	dependencies : [
	#	subproject('sdl2').get_variable('sdl2_dep'),
		dependency('sdl2'),
		minizip_dep,
		subproject('libpng').get_variable('png_dep'),
		subproject('zlib').get_variable('zlib_dep'),
		subproject('libjpeg').get_variable('jpeg_dep'),
		subproject('expat').get_variable('expat_dep'),
		subproject('pcre').get_variable('pcre_dep'),
		dependency('libcurl'),
		subproject('jansson').get_variable('jansson_dep'),
		cmake.subproject('libsndfile', options : opt_var).dependency('sndfile'),
		dependency('gl'),
		dependency('threads'),
		meson.get_compiler('c').find_library('m', required : false),
		meson.get_compiler('c').find_library('dl', required : false),
	],
)
